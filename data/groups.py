from model.group import Group
import random # будем использовать функции, которые что-то случайным образом выбирает
import string # содержит константы хранящие списки символов
# оставим только тестовые данные, которые содержат фиксированный набор значений, никакой случайной генерации не будет
testdata = [
    Group(name="name1", header="header1", footer="footer1"),
    Group(name="name2", header="header2", footer="footer2")
]

# # Сделаем генерацию случайных тестовых данных. Для этого пишем вспомогательную функцию:
# def random_string(prefix, maxlen): # которой в качетсве параметра будем передавать префикс (prefix) и максимальную длину генерируемой строки (maxlen)
#     symbols = string.ascii_letters + string.digits + string.punctuation + " "*10 # это символы, которые собираемся использовать в случайно сгенерированной строке. *10 - это добавить 10 пробелов. string.punctuation - это разные символы, которые буквами и цифрами не являются
#     return prefix + "".join([random.choice(symbols) for i in range(random.randrange(maxlen))]) # случацным образом выбирает символ из заданной строки (symbols),
#     # делать это нам надо многократно [[random.choice(symbols) for i in range(random.randrange(maxlen))]]. Пояснение (random.randrange(maxlen)): будет сгенерирована
#     # случайная длина не превышающая максимальную. У нас есть набор случайных символов и их нужно превратить в строчку: "".join, склеиваем этот список,
#     # добавляем в начало префикс (prefix) и возвращаем получившийся результат (return)
#
# # хотелось бы, чтобы после падения на каком-то тестовом наборе выполнение продолжалось дальше на следующих
# # тестовых наборах и мы получали отчет, где видно на этом тестовом наборе успешно отработало, на этом упало и тд.
# # Для того, чтобы добиться такого эффекта, нужно отказаться от использования цикла внутри теста и перенести тестовые данные
# # на один уровень выше, так чтобы они передавались внутрь тестовой функции в качестве параметра.
# #
# # Делается это следующим образом:
# # 1. Сначала вытаскиваем тестовые данные из функции
# # Вариант 1
# # testdata = [
# #     Group(name=random_string("name", 10), header=random_string("header", 20), footer=random_string("footer", 20)), # будем генерировать случайную строку, которая начинается с префикса name
# #     # и потом содержит еще не более 10 случайных символов
# #     Group(name="", header="", footer="")
# # ]
#
# # Вариант 2. Если хотим сделать одну группу с пустыми данными и несколько не с пустыми (случайными). Тогда делаем следующее
# testdata = [Group(name="", header="", footer="")] + [
#     Group(name=random_string("name", 10), header=random_string("header", 20), footer=random_string("footer", 20)) # будет сгенерирован объект Group, содержащий случайные данные 5 раз и из этих сгенерированных объектов будет построен список
#     for i in range(5) # а еще к нему добавится маленький список, содержащий тестовый набор  с пустыми строками
# ]

# Вариант 3. Если хотим сделать генерацию комбинаций
# testdata = [
#     Group(name=name, header=header, footer=footer) # будет сгенерирован объект Group, содержащий случайные данные 5 раз и из этих сгенерированных объектов будет построен список
#     for name in ["", random_string("name", 10)] # переменная name пробегает по двум возможным значениям "", random_string("name", 10). Для каждого имени мы перебираем разные значения header и footer
#     for header in ["", random_string("header", 20)] # переменная header пробегает по двум возможным значениям "", random_string("name", 20)
#     for footer in ["", random_string("footer", 20)] # переменная footer пробегает по двум возможным значениям "", random_string("name", 20)
# ]
